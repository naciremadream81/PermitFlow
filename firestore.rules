/**
 * @fileOverview Firestore Security Rules for PermitFlow.
 *
 * Core Philosophy: This ruleset enforces a strict user-ownership model for customer-related data,
 * with separate collections for contractors, properties, and checklists that are not directly
 * user-owned. Access is controlled based on the authenticated user's identity and the path
 * of the data being accessed. Authorization Independence is achieved by storing customer-owned data under the /users/{userId} path.
 *
 * Data Structure:
 * - /users/{userId}: Stores customer data.
 * - /users/{userId}/permitPackages/{permitPackageId}: Stores permit packages owned by a specific customer.
 * - /users/{userId}/permitPackages/{permitPackageId}/documents/{documentId}: Stores documents related to a specific permit package.
 * - /contractors/{contractorId}: Stores contractor data.
 * - /properties/{propertyId}: Stores property data.
 * - /checklists/{checklistId}: Stores county-specific checklist data.
 *
 * Key Security Decisions:
 * - Customers can only access their own user data and the permit packages and documents under their user ID.
 * - Listing of all contractors, properties, or checklists is not allowed to prevent data leakage.
 * - Write access to the contractor, property and checklist collections are denied.
 * - The security rules do not implement schema validation in this prototyping phase.
 *
 * Denormalization for Authorization:
 * The `PermitPackage` entity denormalizes the `customerId` into the `/users/{customerId}/permitPackages/{permitPackageId}` path.
 * This avoids the need for `get()` calls to verify ownership of a permit package.
 *
 * Structural Segregation:
 * User-specific data is stored under the `/users/{userId}` path, while shared or public data like contractors, properties, and checklists are stored in separate top-level collections. This segregation improves security and performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages customer data. Only the authenticated user can read and write their own data.
     * @path /users/{userId}
     * @allow (create) User 'user123' can create their own document at /users/user123.
     * @allow (get,update,delete) User 'user123' can read, update, and delete their document at /users/user123.
     * @deny (create,get,update,delete) User 'user456' cannot create, read, update, or delete the document at /users/user123.
     * @principle Enforces document ownership for all operations.  Users can only manage their own data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages permit packages for a specific user. Only the authenticated user can read and write their own permit packages.
     * @path /users/{userId}/permitPackages/{permitPackageId}
     * @allow (create) User 'user123' can create a permit package at /users/user123/permitPackages/package456.
     * @allow (get,update,delete) User 'user123' can read, update, and delete their permit package at /users/user123/permitPackages/package456.
     * @deny (create,get,update,delete) User 'user456' cannot create, read, update, or delete the permit package at /users/user123/permitPackages/package456.
     * @principle Enforces document ownership for all operations.  Users can only manage their own permit packages.
     */
    match /users/{userId}/permitPackages/{permitPackageId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing permit packages is not allowed
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages documents associated with a specific permit package. Only the authenticated user can read and write documents within their permit package.
     * @path /users/{userId}/permitPackages/{permitPackageId}/documents/{documentId}
     * @allow (create) User 'user123' can create a document at /users/user123/permitPackages/package456/documents/doc789.
     * @allow (get,update,delete) User 'user123' can read, update, and delete their document at /users/user123/permitPackages/package456/documents/doc789.
     * @deny (create,get,update,delete) User 'user456' cannot create, read, update, or delete the document at /users/user123/permitPackages/package456/documents/doc789.
     * @principle Enforces document ownership for all operations. Users can only manage documents within their own permit packages.
     */
    match /users/{userId}/permitPackages/{permitPackageId}/documents/{documentId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing documents is not allowed
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages contractor data.  Contractors can only be created through the CMS, and can be read by anyone.
     * @path /contractors/{contractorId}
     * @allow (get) Any authenticated user can get a contractor document.
     * @deny (list) No one can list contractors.
     * @deny (create, update, delete) No one can create, update, or delete contractor documents through the client.
     * @principle Restricts write access to contractors and prevents listing.
     */
    match /contractors/{contractorId} {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages property data.  Properties can only be created through the CMS, and can be read by anyone.
     * @path /properties/{propertyId}
     * @allow (get) Any authenticated user can get a property document.
     * @deny (list) No one can list properties.
     * @deny (create, update, delete) No one can create, update, or delete property documents through the client.
     * @principle Restricts write access to properties and prevents listing.
     */
    match /properties/{propertyId} {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages checklist data.  Checklists can only be created through the CMS, and can be read by anyone.
     * @path /checklists/{checklistId}
     * @allow (get) Any authenticated user can get a checklist document.
     * @deny (list) No one can list checklists.
     * @deny (create, update, delete) No one can create, update, or delete checklist documents through the client.
     * @principle Restricts write access to checklists and prevents listing.
     */
    match /checklists/{checklistId} {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}